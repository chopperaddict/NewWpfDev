<Window x:Class="NewWpfDev.Views.YieldWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        xmlns:local="clr-namespace:NewWpfDev.Views"
        xmlns:view="clr-namespace:NewWpfDev.ViewModels"
        xmlns:conv="clr-namespace:NewWpfDev.Converts"
        xmlns:diags="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        mc:Ignorable="d"
        x:Name="YieldWin"
        Title="Yield demo Window" Height="580" Width="800"
        MinHeight="580" MinWidth="800"
        WindowChrome.ResizeGripDirection="BottomRight"
        ResizeMode="CanResizeWithGrip"
        Background="Cyan">
    
    <Window.Resources>
        <conv:DebugConverter  x:Key="DebugConv"/>
        <conv:BankCombinerCustNoBankno x:Key="BankCombinerCustNoBankno"/>

        <!--<CollectionViewSource x:Key="CollectionView" Source="{Binding BankCollectionView}">
            <CollectionViewSource.SortDescriptions>
                    <scm:SortDescription PropertyName="AcType" Direction="Ascending"/>
            </CollectionViewSource.SortDescriptions>            
        </CollectionViewSource>-->
    </Window.Resources>

     <Window.DataContext>
        <view:YieldWindowViewModel/>
    </Window.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="5"/>
            <RowDefinition Height="90"/>
            <RowDefinition Height="3*"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="45"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="125"/>
        </Grid.ColumnDefinitions>

        <TextBlock Grid.Row="1"  Grid.Column="0" Grid.ColumnSpan="3" 
                   TextWrapping="Wrap" TextAlignment="Center" 
                   Background="Yellow" Foreground="Red" 
                   Height="50" Width="550" Padding="0 0 0 0" 
                   VerticalAlignment="Top"
                   Text="Left Grid loads data normally, while right grid loads using Yield return based on ACTYPE conditions (1-4) passed down to the Datatable processing code that actually handles the yield return. Stack oprations are blindigly fster...." />

        <DataGrid x:Name="dgrid1" Margin="10,15,0,10"  Grid.Row="2" Grid.RowSpan="9"
                  ItemsSource="{Binding bvm}"
                  SelectionMode="Single"
                  CellEditEnding="dgrid1_CellEditEnding"        
                  IsSynchronizedWithCurrentItem ="True">
            </DataGrid>
        
        <DataGrid x:Name="dgrid2" AutoGenerateColumns="True"  Grid.Row="2" Grid.Column="1" Margin="10,15,0,10" Grid.RowSpan="9"
                  CellEditEnding="dgrid2_CellEditEnding"        
                  IsSynchronizedWithCurrentItem ="True"
                  SelectionMode="Single">
        </DataGrid>
        
        <Button x:Name="Stack1"   Grid.Row="2" Grid.Column="2" Template="{StaticResource HorizontalGradientTemplateGreen}"
                Command="{Binding LoadStack1}" 
                Content="{Binding Button1Text}" Width="100" Height="40" FontSize="14" 
                Background="Red" Foreground="White" Margin="0,0,0 5" VerticalAlignment="Bottom"/>
        <Button x:Name="Stack2"   Grid.Row="3" Grid.Column="2" Template="{StaticResource HorizontalGradientTemplateGreen}"
                ToolTip="Loads data into right  grid in Ascending CustNo order , use Right Click to load data in Descending order ...."
                Command="{Binding LoadStack2}" 
                Content="Show stack" Width="100" Height="40" FontSize="14"
                MouseRightButtonDown="Stack2_PreviewButton"
                Background="Red" Foreground="White" Margin="0,0,0 0"/>
        <Button x:Name="iterate"   Grid.Row="4" Grid.Column="2" Template="{StaticResource HorizontalGradientTemplateGreen}"
                Command="{Binding Iterate}" 
                Content="Iterate Db" Width="100" Height="40" FontSize="14"
                Background="Red" Foreground="White" Margin="0,0,0 0"/>
        <Button x:Name="Loadnormal"  Grid.Row="5" Grid.Column="2"  Template="{StaticResource HorizontalGradientTemplateBlue}"
                Command="{Binding LoadNormal}" 
                Content="Load Normal " Width="100" Height="40" 
                Background="Lightgreen" Foreground="Black" Margin="0,0,0 0"/>
        <Button x:Name="loadyield"   Grid.Row="8" Grid.Column="2"  Template="{StaticResource HorizontalGradientTemplateGray}"
                Command="{Binding LoadYield1}" 
                Content="Yield Return 1" Width="100" Height="40"  FontSize="13"
                Background="Lightgreen" Foreground="Black" Margin="0,0,0 0"/>
        <Button x:Name="loadyield2"   Grid.Row="9" Grid.Column="2"  Template="{StaticResource HorizontalGradientTemplateGray}"
                Command="{Binding LoadYield2}" 
                Content="Yield Return 2" Width="100" Height="40"  FontSize="13"
                Background="Lightgreen" Foreground="Black" Margin="0,0,0 0"/>

        <Button x:Name="CloseBtn"   Grid.Row="10" Grid.Column="2"  Template="{StaticResource HorizontalGradientTemplateYellow}"
                Click="Closebtn" Content="Close" Width="100" Height="40"  FontSize="16"
                Background="LightGray" Foreground="Black" Margin="0,0,0 0"/>
        <Button x:Name="CloseAllBtn"   Grid.Row="11" Grid.Column="4" Template="{StaticResource HorizontalGradientTemplateRed}"
                Command="{Binding CloseAllBtn}" 
                Content="Close App" Width="100" Height="40"  FontSize="16"
                Background="Red" Foreground="White" Margin="0,0,0 0"/>
        
        <Label x:Name="counter1" Grid.Row="1" Grid.Column="1" Height="30" Width="80" FontSize="18" Padding="0 3 0 0" HorizontalAlignment="Right"
                Content="{Binding Counter1, Mode=TwoWay}" Background="Blue" Foreground="White" HorizontalContentAlignment="Center" Margin="256,58,2,2"/>
        <Label x:Name="counter2" Grid.Row="1" Height="30" Width="80" FontSize="18" Padding="0 3 0 0" HorizontalAlignment="Right"
                Content="{Binding Counter2, Mode=TwoWay}" Background="Blue" Foreground="White" HorizontalContentAlignment="Center" Margin="254,56,4,4"/>
        <Label x:Name="duration1" Grid.Row="1" Height="30" Width="100" HorizontalAlignment="Right"
                Content="{Binding Duration1, Mode=TwoWay}" Background="Blue" Foreground="White" HorizontalContentAlignment="Center" Margin="0,53,94,0"/>
        <Label x:Name="duration2" Grid.Row="1" Grid.Column="1" Height="30" Width="100"  HorizontalAlignment="Right"
                Content="{Binding Duration2, Mode=TwoWay}" Background="Blue" Foreground="White" HorizontalContentAlignment="Center" Margin="140,58,97,2"/>
        <TextBox x:Name="limit1" Grid.Row="6" Grid.Column="3" 
                 Text="{Binding limit1, Mode=TwoWay}" 
                 Width="100" Height="35" FontSize="18" 
                 Background="Orange" Foreground="Black" TextAlignment="Center"/>
        <TextBox x:Name="limit2" Grid.Row="7" Grid.Column="3" 
                Text="{Binding limit2, Mode=TwoWay}" 
                 Width="100" Height="35" FontSize="18" 
                 Background="Orange" Foreground="Black" TextAlignment="Center"/>

       <!--//NB need Mode=TwoWay to make this one work ??? OneWay fails -->
        <TextBlock x:Name="recordval" Grid.Row="11" Grid.Column="0" Grid.ColumnSpan="2" Height="35" 
                Background="Blue" Foreground="White"  FontSize="16" Padding="0 4 0 0"
                   Text="{Binding InfoPanel, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                TextAlignment="Center" Margin="20,5,172,5">

        </TextBlock>
        <!--// This binding "Binding CustNo" works when datacontext is set to  "bvm"  in code behind, 
        but Datacontext=this fails unless we use a  FULL property such as CustomerNum1"
        or "SelectedAccount1.CustNo which both work-->
        <TextBlock x:Name="custno" Grid.Row="11" Grid.ColumnSpan="2" Height="35" Width="160"
                Background="Blue" Foreground="White"  FontSize="16" 
                   HorizontalAlignment="Right" 
                   TextAlignment="Center"
                   Padding="0 4 0 0" Margin="-985,5,0,5"
                   >
            <TextBlock.Text>
                   <!--//THIS is how you can pass an object (BankAccountViewModel or theViewModel or whatever) to a converter ,
                    so we can combine fields or whatever else we want to show
                    NB SelectedAccount1 is received in [0]-->
                <MultiBinding Converter="{StaticResource BankCombinerCustNoBankno}">
  
                    <!--// provides direct pointer to  YieldWindowViewModel.SelectedAccount1, which is a BankAccountViewModel record-->
                    <!--NB MUST use the DataContext prefix here...
                    NB SelectedAccount1 is received in [0]-->
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Window}" Path="DataContext.SelectedAccount1" />
                    <!--// provides direct pointer to  YieldWindowViewModel.SelectedAccount2, which is a BankAccountViewModel record, mostly it is null->
                    NB SelectedAccount1 is received in [1]-->
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Window}" Path="DataContext.SelectedAccount2" />

                    <!--// provides a pointer to YieldWindowViewModel, which is the ViewModel & current DataContext
                    NB SelectedAccount1 is received in [2]-->
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Window}" Path="DataContext" />
                    <!--// Also provides only a pointer to YieldWindowViewModel, which is the ViewModel & current DataContext
                    NB SelectedAccount1 is received in [3]-->
                    <Binding />
                    <!--This passes the content of button x;Name=Stack1 in [4]-->
                    <Binding ElementName="Stack1" Path="Content"/>
                    <!--This passes the selected item of dgrid2 in [5], but could be any property at all !-->
                    <Binding ElementName="dgrid2" Path="SelectedItem"/>
                    <!--This passes the Text frm custno label in [6]-->
                    <Binding ElementName="custno" Path="Text" />
                </MultiBinding>
                </TextBlock.Text>
            </TextBlock>

    </Grid>
</Window>
