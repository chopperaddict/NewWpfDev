<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:views="clr-namespace:NewWpfDev.Views"
>

    <Style x:Key="ButtonSlant" TargetType="Button">
        <!--Default layout-->
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <!--These defaults can be overriden by the Button Code in the design-->
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="150" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush 
                                    StartPoint="0.2, 0" EndPoint="0, 1">
                    <GradientStop Offset="0" Color="#DF000000" />
                    <GradientStop Offset="4" Color="#69000000" />
                    <GradientStop Offset="0.5" Color="#69EB5E00" />
                    <GradientStop Offset="6" Color="#69000000" />
                    <GradientStop Offset="1" Color="#DF000000" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border  x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0,0,0,0">
                        <ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Now to handle those pesky Triggers-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="TextElement.Foreground"  Value="{StaticResource Green6}"/>
                <Setter Property="BorderBrush"  Value="{StaticResource Black2}"/>
                <Setter Property="BorderThickness"  Value="1"/>
                <Setter Property="FontSize"  Value="14"/>
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush 
                                    StartPoint="0, 1" EndPoint="0.2, 0">
                            <GradientStop Offset="0" Color="#DF000000" />
                            <GradientStop Offset="4" Color="#69000000" />
                            <GradientStop Offset="0.5" Color="#69EB5E00" />
                            <GradientStop Offset="6" Color="#69000000" />
                            <GradientStop Offset="1" Color="#DF000000" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="TextElement.Foreground"  Value="{StaticResource Green6}"/>-->
                <Setter Property="BorderBrush"  Value="{StaticResource White2}"/>
                <Setter Property="BorderThickness"  Value="3"/>
                <Setter Property="FontSize"  Value="15"/>
                <Setter Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush 
                                    StartPoint="0, 1" EndPoint="0.7, 0.6">
                            <GradientStop Offset="0" Color="#DF000000" />
                            <GradientStop Offset="0.4" Color="#69000000" />
                            <GradientStop Offset="0.7" Color="#FF009200" />
                            <GradientStop Offset="0.9" Color="#69000000" />
                            <GradientStop Offset="1" Color="#DF000000" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <!--Makes gradient fill work horizontally-->
                        <RadialGradientBrush Center="0.5, 1.0">
                            <GradientStop Offset="0" Color="Beige" />
                            <GradientStop Offset="1" Color="Red" />
                        </RadialGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Color="LightGray" Offset="0.35" />
                                <GradientStop Color="DarkGray" Offset="1" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="_ColumnsListBoxItemStyle" TargetType="ListBoxItem">
        <!--<Setter Property="Border.Background" Value="{TemplateBinding Background}"/>-->
        <!--<Setter Property="Foreground" Value="{TemplateBinding Foreground}"/>
			<Setter Property="BorderBrush" Value="{TemplateBinding BorderBrush}"/>
			<Setter Property="BorderThickness" Value="{TemplateBinding BorderThickness}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="_Border"	 			
							  Padding="2"
							  SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="false">
                            <Setter TargetName="_Border" Property="Background" Value="{StaticResource Blue0}"/>
                            <Setter Property="TextElement.Foreground" Value="White"/>
                            <Setter Property="TextElement.FontWeight" Value="Medium"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="_Border" Property="Background" Value="{StaticResource Red5}"/>
                            <Setter Property="TextElement.Foreground" Value="White"/>
                            <Setter Property="TextElement.FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="_Border" Property="Background" Value="{StaticResource Cyan5}"/>
                            <Setter Property="TextElement.Foreground" Value="Black"/>
                            <Setter Property="TextElement.FontWeight" Value="Bold"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--// This ia good working listbox/view item control style 
            that has DataTemplate for the***  NW Customer Db ***
            and uses the AP AttachedProperties Class internally for all color control-->
    
    <Style x:Key="ListBoxColorControlTemplate" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Height" Value="{Binding (views:ListboxColorCtrlAP.ItemHeight),  RelativeSource={RelativeSource AncestorType=ListBox}}"/>
        <!--<Setter Property="DropShadow.Color" Value="{Binding (views:ListboxColorCtrlAP.Background),  RelativeSource={RelativeSource AncestorType=ListBox}}"/>-->

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <!--//++++++++++++++++++++++++++++++++//-->
                    <!--// Control Template for NW Customer Db-->
                    <!--//++++++++++++++++++++++++++++++++//-->
                    <Border x:Name="Bd" 
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}"                                             
                                            Padding="{TemplateBinding Padding}" 
                                            SnapsToDevicePixels="true" >
                        <!--Height="{Binding Path=ItemHeight, ElementName=contentpresenter}">-->
                        <Border.Background>
                            <SolidColorBrush x:Name="borderbckgrnd" Color="{TemplateBinding Background}" />
                        </Border.Background>
                        <ContentPresenter x:Name="contentpresenter"                                                            
                                                Height="{Binding ActualHeight, ElementName=Bd}"                                                
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"   
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"   
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        </ContentPresenter>
                    </Border>

                    <!--#region Triggers-->
                    <ControlTemplate.Triggers>
                        <!--The TextElement.Foreground is the magic line to get the text color under control-->
                        <!--// These only work on TextBlocks, and NOT on TextBoxes for some reason-->

                        <!--NOT Selected, No Mouse-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false"/>
                                <Condition Property="IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.Background), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.Background), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                        </MultiTrigger>
                        <!--NOT Selected, Mouse OVER-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.MouseoverForeground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                        </MultiTrigger>

                        <!--IS Selected, No Mouse-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false"/>
                                <Condition Property="IsSelected" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.SelectionBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.SelectionBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.SelectionForeground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeightSelected), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>

                        </MultiTrigger>

                        <!--IS Selected, Mouse OVER-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding (views:ListboxColorCtrlAP.MouseoverSelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.Foreground" Value="{Binding (views:ListboxColorCtrlAP.MouseoverSelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontWeight" Value="{Binding Path=(views:ListboxColorCtrlAP.FontWeightSelected), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                            <Setter Property="TextElement.FontSize" Value="{Binding Path=(views:ListboxColorCtrlAP.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>


                    </ControlTemplate.Triggers>

                    <!--#endregion Triggers-->

                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="GenericListBoxItemStyle1" TargetType="ListBoxItem">
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="{Binding Path=Width}" />

        <!--Remove focus rectangle - IT WORKS-->
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border
							x:Name="_Border"
							Padding="3"
							Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType=ListBox}}"
							HorizontalAlignment="Stretch">
                        <ContentPresenter x:Name="Contentpresenter" 
								HorizontalAlignment="Left"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--Normal, UnSelected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="Contentpresenter" Property="TextElement.Foreground" Value="{Binding Path=ItemForeground,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="_Border" Property="Background" Value="{Binding Path=ItemBackground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!--Normal, Selected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <!--<Setter Property="Background" Value="{StaticResource Red5}" />-->
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="Contentpresenter" Property="TextElement.Foreground" Value="{Binding Path=SelectedForeground,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="_Border" Property="Background" Value="{Binding Path=SelectedBackground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!--Mouseover, UnSelected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="Contentpresenter" Property="TextElement.Foreground" Value="{Binding Path=MouseoverForeground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="_Border" Property="Background" Value="{Binding Path=MouseoverBackground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!--Moiuseover, Selected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsSelected" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="Contentpresenter" Property="TextElement.Foreground" Value="{Binding Path=MouseoverSelectedForeground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter TargetName="_Border" Property="Background" Value="{Binding Path=MouseoverSelectedBackground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="_ListBoxItemStyle1" TargetType="ListBoxItem" >
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextElement.Foreground" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="{Binding Path=Width}" />

        <!--Remove focus rectangle - IT WORKS-->
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <!--<Setter Property="_Border" Value="{TemplateBinding Background}" />-->
        <!--<Setter Property="TextElement.Foreground" Value="{TemplateBinding Foreground}" />-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border
							x:Name="_Border"
							Padding="3"
							Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType=ListBox}}"
							HorizontalAlignment="Stretch">
                        <ContentPresenter  
								HorizontalAlignment="Left"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--Normal, UnSelected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="TextElement.Foreground" Value="{StaticResource White0}" />
                                <Setter TargetName="_Border" Property="Background" Value="{StaticResource Gray0}" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter Property="FontWeight" Value="Regular" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!--Normal, Selected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="TextElement.Foreground" Value="{StaticResource Black1}" />
                                <Setter TargetName="_Border" Property="Background" Value="{StaticResource Cyan1}" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter Property="FontWeight" Value="DemiBold" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!--Mouseover, UnSelected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter Property="TextElement.Foreground" Value="{StaticResource White0}" />
                                <Setter TargetName="_Border" Property="Background" Value="{StaticResource Red5}" />
                                <Setter Property="FontWeight" Value="DemiBold" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!--Moiuseover, Selected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsSelected" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="HorizontalAlignment" Value="Stretch" />
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                                <Setter Property="TextElement.Foreground" Value="{StaticResource White0}" />
                                <Setter TargetName="_Border" Property="Background" Value="{StaticResource Green2}" />
                                <!--<Setter Property="FontSize" Value="{Binding Fontsize}"/>-->
                                <Setter Property="FontWeight" Value="DemiBold" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--//Default (GENERIC DATA) style for ListViewItems-->
    <Style x:Key="lvItemStyle1" TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="1,1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="{Binding Path=Width}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" 
						HorizontalAlignment="Stretch"
						BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
						Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="true"
						Width="{TemplateBinding Width}">
                        <Border.Background>
                            <SolidColorBrush x:Name="borderbckgrnd" Color="{TemplateBinding Background}" />
                        </Border.Background>

                        <ContentPresenter x:Name="contentpresenter"                                                            
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        </ContentPresenter>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!--Normal, UnSelected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false"/>
                                <Condition Property="IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Blue4}"/>
                            <Setter Property="TextElement.Foreground" Value="{StaticResource White1}"/>
                            <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            <Setter Property="FontWeight" Value="DemiBold"/>
                            <!--<Setter Property="BorderThickness" Value="1"/>-->
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <!--Mouse over, UnSelected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Cyan8}"/>
                            <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                            <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            <!--<Setter Property="BorderThickness" Value="1"/>-->
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </MultiTrigger>
                        <!--Normal, Selected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="false"/>
                                <Condition Property="IsSelected" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Red5}"/>
                            <Setter Property="TextElement.Foreground" Value="{StaticResource White1}"/>
                            <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            <Setter Property="FontWeight" Value="DemiBold"/>
                            <!--<Setter Property="BorderThickness" Value="1"/>-->
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource White0}"/>
                        </MultiTrigger>
                        <!--Mouse over, Selected-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Red0}"/>
                            <Setter Property="TextElement.Foreground" Value="{StaticResource White0}"/>
                            <Setter Property="FontSize" Value="{Binding Path=Fontsize,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                            <!--<Setter Property="BorderThickness" Value="1"/>-->
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource White0}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BtnStyle1" TargetType="Button">
        <!--Default layout-->
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <!--These defaults can be overriden by the Button Code in the design-->
        <!--<Setter Property="Height" Value="{TemplateBinding Height}" />
            <Setter Property="Width" Value="{TemplateBinding Width}" />
            <Setter Property="BorderBrush" Value="Yellow" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="FontSize" Value="{TemplateBinding FontSize}" />
            <Setter Property="FontWeight" Value="Normal" />-->

        <!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->
        <Setter Property="Foreground" Value="Black" />

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5 5 5 5">

                        <!--MOST IMPORTANT the ContentPresenter lives here and displays our
							"Content" text correctly NB: Interestingly, it is in the BORDER which
							is the Outermost part of a buttons "design" as shown very clearly in
							the Visual Tree so that is where I need to put it with other controls-->

                        <!--V.Tree shows that inside the ContentPresenter is a StackPanel that
							actually contains the Contents text-->
                        <!--<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{TemplateBinding Content}"/>-->
                        <ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Now to handle those pesky Triggers-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="false"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                                <GradientStop Offset="1" Color="DarkOrange" />
                                <GradientStop Offset="0.55" Color="#C67928" />
                                <GradientStop Offset="0" Color="Yellow" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
                                <GradientStop Offset="1" Color="DarkOrange" />
                                <GradientStop Offset="0.55" Color="#C67928" />
                                <GradientStop Offset="0" Color="Yellow" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="Red"/>
                    <Setter Property="Foreground" Value="White"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="false"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Opacity" Value="0.7"/>
                    <Setter Property="Background" Value="{StaticResource Gray3}"/>
                    <Setter Property="TextElement.Foreground" Value="Red"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>